#!/usr/bin/env python3
#
# Copyright (C) 2017 Marcel Patzwahl
# Licenciado sob os termos da GNU GPL v3.
#
# Script para i3blocks que mostra as atualizações disponíveis do pacman e do AUR
import subprocess
from subprocess import check_output
import argparse
import os
import re


def create_argparse():
    def _default(name, default='', arg_type=str):
        val = default
        if name in os.environ:
            val = os.environ[name]
        return arg_type(val)

    strbool = lambda s: s.lower() in ['t', 'true', '1']
    strlist = lambda s: s.split()

    parser = argparse.ArgumentParser(description='Verifica atualizações do pacman')
    parser.add_argument(
        '-b',
        '--base_color',
        default = _default('BASE_COLOR', '#CCCCCC'),
        help='Cor padrão da saída (padrão: branco)'
    )
    parser.add_argument(
        '-u',
        '--updates_available_color',
        default = _default('UPDATE_COLOR', '#45A6F4'),
        help='Cor usada quando houver atualizações (padrão: azul)'
    )
    parser.add_argument(
        '-y',
        '--aur_yay',
        action = 'store_const',
        const = True,
        default = _default('AUR_YAY', 'False', strbool),
        help='Incluir pacotes do AUR (requer o Yay instalado)'
    )
    parser.add_argument(
        '-q',
        '--quiet',
        action = 'store_const',
        const = True,
        default = _default('QUIET', 'False', strbool),
        help='Não exibe nada se o sistema já estiver atualizado'
    )
    parser.add_argument(
        '-w',
        '--watch',
        nargs='*',
        default = _default('WATCH', arg_type=strlist),
        help='Monitorar pacotes específicos (usa expressões regulares para casar nomes)'
    )
    return parser.parse_args()


def get_updates():
    output = ''
    try:
        output = check_output(['checkupdates']).decode('utf-8')
    except subprocess.CalledProcessError as exc:
        # O comando checkupdates retorna código 2 e sem saída se não houver atualizações.
        # Nesse caso, ignoramos o erro e continuamos normalmente.
        if not (exc.returncode == 2 and not exc.output):
            raise exc
    if not output:
        return []

    updates = [line.split(' ')[0]
               for line in output.split('\n')
               if line]

    return updates


def get_aur_yay_updates():
    try:
        output = check_output(['yay', '-Qua']).decode('utf-8')
        if not output:
            return []
        aur_updates = [line.split(' ')[0] for line in output.split('\n') if line]
        return aur_updates
    except:
        return []  # Retorna uma lista vazia em caso de erro


def matching_updates(updates, watch_list):
    matches = set()
    for u in updates:
        for w in watch_list:
            if re.match(w, u):
                matches.add(u)

    return matches

label = os.environ.get("LABEL","")
message = "{0}<span color='{1}'>󰣇    {2}</span>"
args = create_argparse()

updates = get_updates()
if args.aur_yay:
    updates += get_aur_yay_updates()

update_count = len(updates)
if update_count > 0:
    if update_count == 1:
        info = str(update_count) + ' Atualização disponível'
        short_info = str(update_count) + ' Atualização'
    else:
        info = str(update_count) + ' Atualizações disponíveis'
        short_info = str(update_count) + ' Atualizações'

    matches = matching_updates(updates, args.watch)
    if matches:
        info += ' [{0}]'.format(', '.join(matches))
        short_info += '*'
    print(message.format(label, args.updates_available_color, info))
    print(message.format(label, args.updates_available_color, short_info))
elif not args.quiet:
    print(message.format(label, args.base_color, 'Sistema atualizado'))
